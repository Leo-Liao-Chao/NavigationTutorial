#define EIGEN_USE_MKL_ALL
#define EIGEN_VECTORIZE_SSE4_2
#include "mkl.h"

#include <ros/ros.h>
#include <visualization_msgs/MarkerArray.h>
#include <geometry_msgs/Point.h>
#include <eigen3/Eigen/Dense>
#include <eigen3/Eigen/Core>
#include <time.h>
#include <iostream>
#include <random>

#include <ilqr/VehicleArray.h> // Replace with your package name
#include <ilqr/Vehicle.h>      // Replace with your package name

#include "../include/ilqr/iLQR.h"
#include "../include/ilqr/Parameters.h"
#include "../include/ilqr/Experiment.h"

using Eigen::MatrixXd;
using Eigen::VectorXd;

Parameters params;

std::vector<Obstacle> obstacles;

std::vector<ilqr::Vehicle> obstacle_vehicles;
ilqr::Vehicle ego_vehicle;

void vehicleDataCallback(const ilqr::VehicleArray::ConstPtr &msg)
{
    obstacle_vehicles = msg->vehicles;

    std::vector<Obstacle> obstacle_array;
    obstacle_array.reserve(msg->vehicles.size());
    for (const auto &vehicle : msg->vehicles)
    {
        Eigen::MatrixXd dimension = Eigen::MatrixXd::Zero(2, params.horizon);
        Eigen::MatrixXd position = Eigen::MatrixXd::Zero(4, params.horizon);

        for (int i = 0; i < params.horizon; i++)
        {
            dimension(0, i) = vehicle.length;
            dimension(1, i) = vehicle.width;

            position(0, i) = vehicle.x;
            position(1, i) = vehicle.y;
            position(2, i) = 0;
            position(3, i) = vehicle.yaw;
            // position(3,i) = (vehicle_info.pose.orientation.z + 360.0)%360/180.0*3.1415926;
        }
        Obstacle temp(params, dimension, position);
        obstacle_array.push_back(temp);
    }
    // std::cout<<"Message Received"<<std::endl;
    obstacles = obstacle_array;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "ILQR");
    ros::NodeHandle nh;
    ros::Rate rate(60); // 1 Hz

    ros::Publisher global_path_pub = nh.advertise<visualization_msgs::MarkerArray>("Global_Path", 10);
    ros::Publisher marker_pub = nh.advertise<visualization_msgs::MarkerArray>("ILQR_Path", 10);
    ros::Publisher local_path_pub = nh.advertise<visualization_msgs::MarkerArray>("Local_Path", 10);
    ros::Publisher ego_vehicle_pub = nh.advertise<ilqr::Vehicle>("ego_vehicle_data", 10);
    ros::Publisher result_pub = nh.advertise<std_msgs::String>("/experiment_result", 1);

    ros::Subscriber vehicle_data_sub = nh.subscribe("/vehicle_data", 10, vehicleDataCallback);
    /*
    define path
    */
    MatrixXd global_path(2, 557);
    {
        MatrixXd straight_path(2, 20); // x:0 y:1;
        for (int i = 0; i < 20; i++)
        {
            straight_path(0, i) = 4 * i;
            straight_path(1, i) = 0.0;
        }

        MatrixXd circle_path(2, 20);
        for (int i = 0; i < 20; i++)
        {
            circle_path(0, i) = 10 * std::cos(i * 3.1415926 / 20);
            circle_path(1, i) = 10 * std::sin(i * 3.1415926 / 20);
        }

        // MatrixXd global_path(2, 20);
        // global_path = circle_path;
        // MatrixXd global_path(2, 557);
        global_path.row(0) << 41.8574180603,
            41.8575057983,
            41.8575935364,
            41.8576812744,
            41.8577690125,
            41.8578529358,
            41.8579406738,
            41.8580284119,
            41.8581161499,
            41.8582000732,
            41.8582878113,
            41.8583755493,
            41.8584632874,
            41.8585472107,
            41.8586349487,
            41.8587226868,
            41.8588104248,
            41.8588981628,
            41.8589820862,
            41.8590698242,
            41.8591575623,
            41.8592529297,
            41.859249115,
            41.859336853,
            41.8594245911,
            41.8595085144,
            41.9539604187,
            42.262550354,
            42.7775192261,
            43.4850578308,
            44.4481697083,
            45.6345100403,
            46.9723777771,
            48.3958778381,
            49.4920082092,
            50.4920082092,
            51.4922142029,
            52.6593093872,
            52.6593093872,
            53.6593093872,
            54.6593093872,
            55.6593093872,
            56.6593093872,
            57.6593093872,
            58.6593093872,
            59.6593093872,
            60.6593093872,
            61.6593093872,
            62.6593093872,
            63.6593093872,
            64.6593093872,
            65.6593093872,
            66.6593093872,
            67.6593093872,
            68.6593093872,
            69.6593093872,
            70.6593093872,
            71.6593093872,
            72.6593093872,
            73.6593093872,
            74.6593093872,
            75.6593093872,
            76.6593093872,
            77.6593093872,
            78.6593093872,
            79.6593093872,
            80.6593093872,
            81.6593093872,
            82.6593093872,
            83.6593093872,
            84.6593093872,
            85.6593093872,
            86.6593093872,
            87.6593093872,
            88.6593093872,
            89.6593093872,
            90.6593093872,
            91.6593093872,
            92.6593093872,
            93.6593093872,
            94.6593093872,
            95.6593093872,
            96.6593093872,
            97.6593093872,
            98.6593093872,
            99.6593093872,
            100.659309387,
            101.659309387,
            102.659309387,
            103.659309387,
            104.659309387,
            105.659309387,
            106.659309387,
            107.659309387,
            108.659309387,
            109.659309387,
            110.659309387,
            111.659309387,
            112.659309387,
            113.659309387,
            114.659309387,
            115.659309387,
            116.659309387,
            117.659309387,
            118.659309387,
            119.659301758,
            120.659301758,
            121.659301758,
            122.659301758,
            123.659301758,
            124.659301758,
            125.659301758,
            126.659301758,
            127.659301758,
            128.659301758,
            129.659301758,
            130.659301758,
            131.659301758,
            132.659301758,
            133.659301758,
            134.659301758,
            135.659301758,
            136.659301758,
            137.662734985,
            138.662734985,
            139.662719727,
            140.662719727,
            141.662719727,
            142.662719727,
            143.662719727,
            144.662719727,
            145.662719727,
            146.662719727,
            147.662719727,
            148.662719727,
            149.662719727,
            150.662719727,
            151.662719727,
            152.662719727,
            153.662719727,
            154.662719727,
            155.662719727,
            156.662719727,
            157.662704468,
            158.662704468,
            159.662704468,
            160.662704468,
            161.662704468,
            162.662704468,
            163.662704468,
            164.662704468,
            165.662704468,
            166.662704468,
            167.662704468,
            168.662704468,
            169.662704468,
            170.662689209,
            171.662689209,
            172.662689209,
            173.662689209,
            174.662689209,
            175.662689209,
            176.662689209,
            177.662689209,
            178.662689209,
            179.662689209,
            180.823226929,
            180.823226929,
            181.99432373,
            183.156555176,
            184.301254272,
            185.419952393,
            186.504272461,
            187.546157837,
            188.537826538,
            189.410598755,
            190.347015381,
            191.186279297,
            191.917312622,
            192.530548096,
            193.017929077,
            193.373016357,
            193.591186523,
            193.669998169,
            193.669998169,
            193.670684814,
            193.67137146,
            193.672042847,
            193.672729492,
            193.673416138,
            193.674102783,
            193.674789429,
            193.675476074,
            193.676147461,
            193.676834106,
            193.677520752,
            193.678207397,
            193.678894043,
            193.679580688,
            193.680252075,
            193.680938721,
            193.681625366,
            193.682312012,
            193.682998657,
            193.683670044,
            193.684356689,
            193.685043335,
            193.68572998,
            193.686416626,
            193.687103271,
            193.687774658,
            193.688461304,
            193.689147949,
            193.689834595,
            193.69052124,
            193.691207886,
            193.691879272,
            193.692565918,
            193.693252563,
            193.693939209,
            193.694625854,
            193.6953125,
            193.695983887,
            193.696670532,
            193.697357178,
            193.698043823,
            193.698730469,
            193.699401855,
            193.699951172,
            193.699737549,
            193.699462891,
            193.699462891,
            193.699234009,
            193.699005127,
            193.698791504,
            193.698562622,
            193.69833374,
            193.698104858,
            193.697875977,
            193.697647095,
            193.697433472,
            193.69720459,
            193.696975708,
            193.696746826,
            193.696517944,
            193.696304321,
            193.696075439,
            193.695846558,
            193.695388794,
            193.695388794,
            193.695159912,
            193.69493103,
            193.694717407,
            193.694488525,
            193.694259644,
            193.694030762,
            193.69380188,
            193.693572998,
            193.693359375,
            193.693130493,
            193.692901611,
            193.692672729,
            193.692443848,
            193.692230225,
            193.692001343,
            193.691772461,
            193.691543579,
            193.691314697,
            193.691085815,
            193.690872192,
            193.690643311,
            193.690414429,
            193.690185547,
            193.689956665,
            193.689743042,
            193.68951416,
            193.689285278,
            193.689056396,
            193.688827515,
            193.688598633,
            193.688323975,
            193.688323975,
            193.688095093,
            193.68788147,
            193.687652588,
            193.687423706,
            193.687194824,
            193.686965942,
            193.686752319,
            193.686523438,
            193.686294556,
            193.686065674,
            193.685836792,
            193.685623169,
            193.685394287,
            193.685165405,
            193.684936523,
            193.684707642,
            193.684249878,
            193.684249878,
            193.684020996,
            193.683792114,
            193.683578491,
            193.683349609,
            193.683120728,
            193.682891846,
            193.682662964,
            193.682434082,
            193.682220459,
            193.681991577,
            193.681762695,
            193.681533813,
            193.681304932,
            193.681091309,
            193.680862427,
            193.680633545,
            193.680404663,
            193.680175781,
            193.680236816,
            193.681549072,
            193.682907104,
            193.684265137,
            193.685623169,
            193.686981201,
            193.688339233,
            193.689697266,
            193.691055298,
            193.69241333,
            193.693771362,
            193.695129395,
            193.696487427,
            193.697845459,
            193.699203491,
            193.700561523,
            193.701919556,
            193.703277588,
            193.70463562,
            193.705993652,
            193.707351685,
            193.708724976,
            193.710083008,
            193.71144104,
            193.712799072,
            193.714157104,
            193.715515137,
            193.716873169,
            193.718231201,
            193.719589233,
            193.720947266,
            193.722305298,
            193.72366333,
            193.725021362,
            193.726379395,
            193.727737427,
            193.729095459,
            193.730453491,
            193.731811523,
            193.733169556,
            193.734527588,
            193.73588562,
            193.737243652,
            193.738601685,
            193.739990234,
            193.739990234,
            193.732498169,
            193.627075195,
            193.401626587,
            193.05847168,
            192.601089478,
            192.03414917,
            191.36340332,
            190.595672607,
            189.741622925,
            188.812927246,
            187.815872192,
            186.759872437,
            185.654876709,
            184.511322021,
            183.339935303,
            181.498641968,
            181.498641968,
            180.498641968,
            179.498641968,
            178.498641968,
            177.498641968,
            176.498641968,
            175.498641968,
            174.498641968,
            173.498641968,
            172.498641968,
            171.498641968,
            170.498641968,
            169.498641968,
            168.498641968,
            167.498641968,
            166.498641968,
            165.498641968,
            164.498641968,
            163.498641968,
            162.498641968,
            161.498641968,
            160.498641968,
            159.498641968,
            158.498641968,
            157.498641968,
            156.498641968,
            155.498641968,
            154.498641968,
            153.498641968,
            152.498641968,
            151.498641968,
            150.498641968,
            149.498641968,
            148.498641968,
            147.498641968,
            146.498641968,
            145.498641968,
            144.498641968,
            143.498641968,
            142.498641968,
            141.498641968,
            140.498641968,
            139.498657227,
            138.498657227,
            137.499328613,
            136.501373291,
            135.501373291,
            134.501373291,
            133.501373291,
            132.501373291,
            131.501373291,
            130.501373291,
            129.501373291,
            128.501373291,
            127.501373291,
            126.501373291,
            125.501373291,
            124.501373291,
            123.501373291,
            122.501373291,
            121.501373291,
            120.501373291,
            119.501373291,
            118.501373291,
            117.501373291,
            116.501373291,
            115.501373291,
            114.50138092,
            113.50138092,
            112.50138092,
            111.50138092,
            110.50138092,
            109.50138092,
            108.50138092,
            107.50138092,
            106.50138092,
            105.50138092,
            104.50138092,
            103.50138092,
            102.50138092,
            101.50138092,
            100.50138092,
            99.5013809204,
            98.5013809204,
            97.5013809204,
            96.5013809204,
            95.5013809204,
            94.5013885498,
            93.5013885498,
            92.5013885498,
            91.5013885498,
            90.5013885498,
            89.5013885498,
            88.5013885498,
            87.5013885498,
            86.5013885498,
            85.5013885498,
            84.5013885498,
            83.5013885498,
            82.5013885498,
            81.5013885498,
            80.5013885498,
            79.5013885498,
            78.5013885498,
            77.5013885498,
            76.5013885498,
            75.5013885498,
            74.5013885498,
            73.5013885498,
            72.5013885498,
            71.5013885498,
            70.5013885498,
            69.5013885498,
            68.5013885498,
            67.5013885498,
            66.5013885498,
            65.5013885498,
            64.5013885498,
            63.5013923645,
            62.5013923645,
            61.5013923645,
            60.5013923645,
            59.5013923645,
            58.5013923645,
            57.5013923645,
            56.5013923645,
            55.5013923645,
            54.5013923645,
            53.5013923645,
            52.5013999939,
            51.5013999939,
            50.5013999939,
            49.4986190796,
            48.4946212769,
            47.492816925,
            46.4928245544,
            45.4928321838,
            44.4928359985,
            43.4928436279,
            42.4928512573,
            41.492855072,
            40.4928627014,
            39.4928703308,
            38.4928779602,
            37.4928817749,
            36.4928894043,
            35.492893219,
            34.4929008484,
            33.4929084778,
            32.4929161072,
            31.4929237366,
            30.4929294586,
            29.492937088,
            28.4929428101,
            27.4929504395,
            26.4929561615,
            25.4929618835,
            24.4929695129,
            23.492975235,
            22.4929828644,
            21.4929885864,
            20.4929943085,
            19.4930019379,
            18.4930076599,
            17.4930152893,
            16.4930210114,
            15.4930276871,
            14.4930315018,
            13.4930391312,
            12.4930467606,
            11.49305439,
            10.4930582047,
            9.49306583405,
            8.49307346344,
            7.49307727814,
            6.49308490753,
            4.79232978821;

        global_path.row(1) << -274.900177,
            -275.900177,
            -276.900177,
            -277.900177,
            -278.900177,
            -279.900177,
            -280.900177,
            -281.900177,
            -282.900177,
            -283.900177,
            -284.900177,
            -285.900177,
            -286.900177,
            -287.900177,
            -288.900177,
            -289.900177,
            -290.900177,
            -291.900177,
            -292.900177,
            -293.900177,
            -294.900177,
            -295.9601746,
            -295.9602051,
            -296.9602051,
            -297.9602051,
            -298.9602051,
            -300.2608643,
            -301.5508423,
            -302.7731628,
            -303.89505,
            -304.9360962,
            -305.7555542,
            -306.2931519,
            -306.5223999,
            -306.5302734,
            -306.5306091,
            -306.5309753,
            -306.5313721,
            -306.5313721,
            -306.5317078,
            -306.5320435,
            -306.5323792,
            -306.5327148,
            -306.5330811,
            -306.5334167,
            -306.5337524,
            -306.5340881,
            -306.5344238,
            -306.5347595,
            -306.5350952,
            -306.5354309,
            -306.5357666,
            -306.5361023,
            -306.5364685,
            -306.5368042,
            -306.5371399,
            -306.5374756,
            -306.5378113,
            -306.538147,
            -306.5384827,
            -306.5388184,
            -306.5391541,
            -306.5395203,
            -306.539856,
            -306.5401917,
            -306.5405273,
            -306.540863,
            -306.5411987,
            -306.5415344,
            -306.5418701,
            -306.5422058,
            -306.5425415,
            -306.5429077,
            -306.5432434,
            -306.5435791,
            -306.5439148,
            -306.5442505,
            -306.5445862,
            -306.5449219,
            -306.5452576,
            -306.5455933,
            -306.5459595,
            -306.5462952,
            -306.5466309,
            -306.5469666,
            -306.5473022,
            -306.5476379,
            -306.5479736,
            -306.5483093,
            -306.548645,
            -306.5489807,
            -306.5493469,
            -306.5496826,
            -306.5500183,
            -306.550354,
            -306.5506897,
            -306.5510254,
            -306.5513611,
            -306.5516968,
            -306.5520325,
            -306.5523682,
            -306.5527344,
            -306.5530701,
            -306.5534058,
            -306.5537415,
            -306.5540771,
            -306.5544128,
            -306.5547485,
            -306.5550842,
            -306.5554199,
            -306.5557861,
            -306.5561218,
            -306.5564575,
            -306.5567932,
            -306.5571289,
            -306.5574646,
            -306.5578003,
            -306.558136,
            -306.5584717,
            -306.5588074,
            -306.5591736,
            -306.5595093,
            -306.559845,
            -306.5592957,
            -306.5579224,
            -306.5565491,
            -306.5551758,
            -306.5538025,
            -306.5524292,
            -306.5510559,
            -306.5496826,
            -306.5483093,
            -306.546936,
            -306.5455627,
            -306.5441895,
            -306.5428162,
            -306.5414429,
            -306.5400696,
            -306.5386963,
            -306.537323,
            -306.5359497,
            -306.5345764,
            -306.5332031,
            -306.5318298,
            -306.5304565,
            -306.5290833,
            -306.52771,
            -306.5263367,
            -306.5249634,
            -306.5235901,
            -306.5222168,
            -306.5208435,
            -306.5194702,
            -306.5180969,
            -306.5167236,
            -306.5153503,
            -306.5139771,
            -306.5126038,
            -306.5112305,
            -306.5098572,
            -306.5084839,
            -306.5071106,
            -306.5057373,
            -306.504364,
            -306.5029907,
            -306.5016174,
            -306.5,
            -306.5,
            -306.4477844,
            -306.2947998,
            -306.0422058,
            -305.691864,
            -305.2463989,
            -304.7091064,
            -304.0840149,
            -303.4436951,
            -302.6482239,
            -301.7507935,
            -300.7632446,
            -299.6985168,
            -298.5706177,
            -297.3943787,
            -296.1851807,
            -294.5813599,
            -294.5813599,
            -293.5813599,
            -292.5813599,
            -291.5813599,
            -290.5813599,
            -289.5813599,
            -288.5813599,
            -287.5813599,
            -286.5813599,
            -285.5813599,
            -284.5813599,
            -283.5813599,
            -282.5813599,
            -281.5813599,
            -280.5813599,
            -279.5813599,
            -278.5813599,
            -277.5813599,
            -276.5813599,
            -275.5813599,
            -274.5813599,
            -273.5813599,
            -272.5813599,
            -271.5813599,
            -270.5813599,
            -269.5813599,
            -268.5813599,
            -267.5813599,
            -266.5813599,
            -265.5813599,
            -264.5813599,
            -263.5813599,
            -262.5813599,
            -261.5813599,
            -260.5813599,
            -259.5813599,
            -258.5813599,
            -257.5813599,
            -256.5813599,
            -255.5813599,
            -254.5813599,
            -253.5813751,
            -252.5813751,
            -251.5813751,
            -250.579895,
            -249.5795441,
            -248.3495331,
            -248.3495331,
            -247.3495331,
            -246.3495331,
            -245.3495331,
            -244.3495331,
            -243.3495331,
            -242.3495331,
            -241.3495331,
            -240.3495331,
            -239.3495331,
            -238.3495331,
            -237.3495331,
            -236.3495331,
            -235.3495331,
            -234.3495331,
            -233.3495331,
            -232.3495331,
            -230.3495331,
            -230.3495331,
            -229.3495331,
            -228.3495331,
            -227.3495331,
            -226.3495331,
            -225.3495331,
            -224.3495331,
            -223.3495331,
            -222.3495331,
            -221.3495331,
            -220.3495331,
            -219.3495331,
            -218.3495331,
            -217.3495331,
            -216.3495331,
            -215.3495331,
            -214.3495331,
            -213.3495331,
            -212.3495331,
            -211.3495331,
            -210.3495331,
            -209.3495331,
            -208.3495331,
            -207.3495331,
            -206.3495331,
            -205.3495331,
            -204.3495331,
            -203.3495331,
            -202.3495331,
            -201.3495331,
            -200.3495331,
            -199.0895386,
            -199.0895386,
            -198.0895386,
            -197.0895386,
            -196.0895386,
            -195.0895386,
            -194.0895386,
            -193.0895386,
            -192.0895386,
            -191.0895386,
            -190.0895386,
            -189.0895538,
            -188.0895538,
            -187.0895538,
            -186.0895538,
            -185.0895538,
            -184.0895538,
            -183.0895538,
            -181.0895386,
            -181.0895386,
            -180.0895386,
            -179.0895386,
            -178.0895386,
            -177.0895386,
            -176.0895386,
            -175.0895386,
            -174.0895386,
            -173.0895386,
            -172.0895386,
            -171.0895386,
            -170.0895386,
            -169.0895386,
            -168.0895386,
            -167.0895386,
            -166.0895386,
            -165.0895386,
            -164.0895386,
            -163.0895386,
            -162.0917358,
            -161.0927124,
            -160.0927124,
            -159.0927124,
            -158.0927277,
            -157.0927277,
            -156.0927277,
            -155.0927277,
            -154.0927277,
            -153.0927277,
            -152.0927277,
            -151.0927277,
            -150.0927277,
            -149.0927277,
            -148.0927277,
            -147.0927277,
            -146.0927277,
            -145.0927277,
            -144.0927277,
            -143.0927429,
            -142.0927429,
            -141.0927429,
            -140.0927429,
            -139.0927429,
            -138.0927429,
            -137.0927429,
            -136.0927429,
            -135.0927429,
            -134.0927429,
            -133.0927429,
            -132.0927429,
            -131.0927429,
            -130.0927429,
            -129.0927429,
            -128.0927429,
            -127.0927505,
            -126.0927505,
            -125.0927505,
            -124.0927505,
            -123.0927582,
            -122.0927582,
            -121.0927582,
            -120.0927582,
            -119.0927582,
            -118.0723114,
            -118.0723114,
            -116.9948349,
            -115.798172,
            -114.6182251,
            -113.46698,
            -112.356163,
            -111.2970657,
            -110.3004608,
            -109.3764954,
            -108.5365829,
            -107.7865982,
            -107.1301804,
            -106.5735245,
            -106.1218643,
            -105.7794495,
            -105.5495224,
            -105.4199982,
            -105.4199982,
            -105.4206772,
            -105.4213562,
            -105.4220352,
            -105.4227142,
            -105.4233933,
            -105.4240723,
            -105.4247513,
            -105.4254303,
            -105.4261093,
            -105.4267883,
            -105.4274673,
            -105.4281464,
            -105.4288254,
            -105.4295044,
            -105.4301834,
            -105.4308624,
            -105.4315414,
            -105.4322205,
            -105.4328995,
            -105.4335785,
            -105.4342575,
            -105.4349365,
            -105.4356155,
            -105.4362946,
            -105.4369736,
            -105.4376602,
            -105.4383392,
            -105.4390183,
            -105.4396973,
            -105.4403763,
            -105.4410553,
            -105.4417343,
            -105.4424133,
            -105.4430923,
            -105.4437714,
            -105.4444504,
            -105.4451294,
            -105.4458084,
            -105.4464874,
            -105.4471664,
            -105.4478455,
            -105.4485245,
            -105.4492035,
            -105.4498596,
            -105.4494324,
            -105.4487534,
            -105.4480743,
            -105.4473953,
            -105.4467163,
            -105.4460373,
            -105.4453506,
            -105.4446716,
            -105.4439926,
            -105.4433136,
            -105.4426346,
            -105.4419556,
            -105.4412689,
            -105.4405899,
            -105.4399109,
            -105.4392319,
            -105.4385529,
            -105.4378738,
            -105.4371948,
            -105.4365082,
            -105.4358292,
            -105.4351501,
            -105.4344711,
            -105.4337921,
            -105.4331131,
            -105.4324341,
            -105.4317474,
            -105.4310684,
            -105.4303894,
            -105.4297104,
            -105.4290314,
            -105.4283524,
            -105.4276657,
            -105.4269867,
            -105.4263077,
            -105.4256287,
            -105.4249496,
            -105.4242706,
            -105.4235916,
            -105.422905,
            -105.422226,
            -105.4215469,
            -105.4208679,
            -105.4201889,
            -105.4195099,
            -105.4188309,
            -105.4181442,
            -105.4174652,
            -105.4167862,
            -105.4161072,
            -105.4154282,
            -105.4147491,
            -105.4140625,
            -105.4133835,
            -105.4127045,
            -105.4120255,
            -105.4113464,
            -105.4106674,
            -105.4099884,
            -105.4093018,
            -105.4086227,
            -105.4079437,
            -105.4072647,
            -105.4065857,
            -105.4059067,
            -105.40522,
            -105.404541,
            -105.403862,
            -105.403183,
            -105.402504,
            -105.401825,
            -105.4011459,
            -105.4004593,
            -105.3997803,
            -105.3991013,
            -105.3984222,
            -105.3977432,
            -105.3970642,
            -105.3963852,
            -105.3956985,
            -105.3950195,
            -105.3943405,
            -105.3936615,
            -105.3929825,
            -105.3923035,
            -105.3916168,
            -105.3909378,
            -105.3907471,
            -105.3924637,
            -105.3958588,
            -105.3994675,
            -105.4030762,
            -105.4066925,
            -105.4103012,
            -105.4139099,
            -105.4175186,
            -105.4211273,
            -105.424736,
            -105.4283524,
            -105.4319611,
            -105.4355698,
            -105.4391785,
            -105.4427872,
            -105.4463959,
            -105.4500122,
            -105.4536209,
            -105.4572296,
            -105.4608383,
            -105.464447,
            -105.4680557,
            -105.4716721,
            -105.4752808,
            -105.4788895,
            -105.4824982,
            -105.4861069,
            -105.4897156,
            -105.4933319,
            -105.4969406,
            -105.5005493,
            -105.504158,
            -105.5077667,
            -105.5113754,
            -105.5149918,
            -105.5186005,
            -105.5222092,
            -105.5258179,
            -105.5294266,
            -105.5330353,
            -105.5366516,
            -105.5402603,
            -105.543869,
            -105.5500107;
    }

    // 使用随机设备生成种子
    std::random_device rd;

    // 使用Mersenne Twister算法创建随机数生成器
    std::mt19937 gen(rd());

    // 创建均匀分布的整数分布对象，范围是1到10
    std::uniform_int_distribution<> int_dist(1, 10);

    // 创建均匀分布的浮点数分布对象，范围是0.0到1.0
    std::uniform_real_distribution<> real_dist(0.0, 1.0);

    // 创建正态分布的分布对象，均值为0.0，标准差为1.0
    std::normal_distribution<> normal_dist(0.0, 1.0);

    double sigma_x = 0.5, sigma_y = 0.5, sigma_theta = 0;
    nh.param("sigma_x", sigma_x, 0.0);
    nh.param("sigma_y", sigma_y, 0.0);
    nh.param("sigma_theta", sigma_theta, 0.0);
    nh.param("a", params.s_safe_a, 0.0);
    nh.param("b", params.s_safe_b, 0.0);
    nh.param("ego_rad",params.ego_rad,0.0);   

    // normal_dist(gen)

    visualization_msgs::MarkerArray global_path_marker;
    for (size_t i = 0; i < global_path.cols(); ++i)
    {
        visualization_msgs::Marker marker;
        marker.header.frame_id = "map";
        marker.header.stamp = ros::Time::now();
        marker.id = i;
        marker.type = visualization_msgs::Marker::CUBE;
        marker.action = visualization_msgs::Marker::ADD;
        marker.pose.position.x = global_path(0, i);
        marker.pose.position.y = global_path(1, i);
        marker.pose.position.z = 0.0;
        marker.pose.orientation.x = 0.0;
        marker.pose.orientation.y = 0.0;
        marker.pose.orientation.z = 0.0;
        marker.pose.orientation.w = 1.0;
        marker.scale.x = 0.1;  // 矩形的宽度
        marker.scale.y = 0.1;  // 矩形的长度
        marker.scale.z = 0.01; // 矩形的高度
        marker.color.a = 1.0;
        marker.color.r = 1.0;
        marker.color.g = 0.0;
        marker.color.b = 0.0;
        marker.lifetime = ros::Duration(1.0); // 显示时间为1秒

        global_path_marker.markers.push_back(marker);
    }
    // global_path_pub.publish(global_path_marker);

    /*
    iLQR
    */
    VectorXd now_state(4);
    now_state << 41.8575057983, -275.900177, 5.0, -3.1415926 / 2.0;
    // now_state << 0.0, 0.0, 5.0, 0.0;
    VectorXd start_pos = now_state;

    Eigen::Vector4d now_state_with_noise;
    double x_diff, y_diff, theta_diff;

    iLQR ilqrplanner(params);
    ilqrplanner.set_global_plan(global_path);
    ilqr::Vehicle ego_vehicle;

    int count_all = 1;
    int count_fail = 0;

    while (ros::ok())
    {
        
        
        if (count_all % (100 + 1) == 0)
        {
            std_msgs::String msg;
            std::stringstream ss;
            ss << "sigma_x: " << sigma_x << " sigma_y: " << sigma_y << " sigma_theta: " << sigma_theta <<std::endl;
            ss << "count_all: " << count_all - 1<< " count_fail: " << count_fail << std::endl;
            msg.data = ss.str();
            result_pub.publish(msg);
            count_all = 1;
            count_fail = 0;
            sigma_x +=0.01;
            sigma_y +=0.01;
            if(sigma_x>1.0)
            {
                return 0;
            }
        }
        
        ros::spinOnce();
        ilqrplanner.set_Obstacle(obstacles);

        x_diff = normal_dist(gen) * sigma_x;
        y_diff = normal_dist(gen) * sigma_y;
        theta_diff = normal_dist(gen) * sigma_theta;

        now_state_with_noise << now_state(0) + x_diff,
            now_state(1) + y_diff,
            now_state(2),
            now_state(3) + theta_diff;
        /*
        planning
        */
        double start_time = clock();
        ilqrplanner.run_step(now_state_with_noise);
        double end_time = clock();
        double time_cost = (end_time - start_time) / CLOCKS_PER_SEC;
        std::cout << "Planning finished , time cost is " << time_cost << std::endl;
        // std::cout<<ilqrplanner.X_result;
        MatrixXd path = ilqrplanner.X_result;
        MatrixXd local_path = ilqrplanner.ref_traj_result;

        path.row(0) = path.row(0).array() - x_diff;
        path.row(1) = path.row(1).array() - y_diff;
        path.row(2) = path.row(2).array();
        path.row(3) = path.row(3).array() - theta_diff;

        /*
        visual
        */
        visualization_msgs::MarkerArray local_path_marker;
        for (size_t i = 0; i < local_path.cols(); ++i)
        {
            visualization_msgs::Marker marker;
            marker.header.frame_id = "map";
            marker.header.stamp = ros::Time::now();
            marker.id = i;
            marker.type = visualization_msgs::Marker::CUBE;
            marker.action = visualization_msgs::Marker::ADD;
            marker.pose.position.x = local_path(0, i);
            marker.pose.position.y = local_path(1, i);
            marker.pose.position.z = 0.0;
            marker.pose.orientation.x = 0.0;
            marker.pose.orientation.y = 0.0;
            marker.pose.orientation.z = 0.0;
            marker.pose.orientation.w = 1.0;
            marker.scale.x = 0.1;  // 矩形的宽度
            marker.scale.y = 0.1;  // 矩形的长度
            marker.scale.z = 0.01; // 矩形的高度
            marker.color.a = 1.0;
            marker.color.r = 0.0;
            marker.color.g = 1.0;
            marker.color.b = 0.0;
            marker.lifetime = ros::Duration(1.0); // 显示时间为1秒

            local_path_marker.markers.push_back(marker);
        }
        visualization_msgs::MarkerArray marker_array;
        // 为每个路径点创建矩形标记
        for (size_t i = 0; i < path.cols(); ++i)
        {
            visualization_msgs::Marker marker;
            marker.header.frame_id = "map";
            marker.header.stamp = ros::Time::now();
            marker.id = i;
            marker.type = visualization_msgs::Marker::CUBE;
            marker.action = visualization_msgs::Marker::ADD;
            marker.pose.position.x = path(0, i);
            marker.pose.position.y = path(1, i);
            marker.pose.position.z = 0.0;
            marker.pose.orientation.x = 0.0;
            marker.pose.orientation.y = 0.0;
            marker.pose.orientation.z = 0.0;
            marker.pose.orientation.w = 1.0;
            marker.scale.x = 0.1;  // 矩形的宽度
            marker.scale.y = 0.1;  // 矩形的长度
            marker.scale.z = 0.01; // 矩形的高度
            marker.color.a = 1.0;
            marker.color.r = 1.0;
            marker.color.g = 0.0;
            marker.color.b = 1.0;
            marker.lifetime = ros::Duration(1.0); // 显示时间为1秒

            marker_array.markers.push_back(marker);
        }
        /*
        next state
        */

        now_state = path.col(1);

        ego_vehicle.x = now_state(0);
        ego_vehicle.y = now_state(1);
        ego_vehicle.yaw = now_state(3);
        ego_vehicle.length = params.wheelbase + 1;
        ego_vehicle.width = 2;

        for (const auto &obstacle : obstacle_vehicles)
        {
            if (isCollision(ego_vehicle, obstacle))
            {
                count_fail++;
                count_all++;
                std_msgs::String msg;
                std::stringstream ss;
                ss << "Collision detected with obstacle at " << obstacle.x <<" , "<< obstacle.y << std::endl;
                ss << "Now state is " << ego_vehicle.x <<" , "<< ego_vehicle.y <<" , "<< ego_vehicle.yaw << std::endl;
                msg.data = ss.str();
                result_pub.publish(msg);
                now_state = start_pos;
                break;
            }
        }
        if(now_state(0) < 20.0)
        {
            count_all++;
            now_state = start_pos;
        }

        // 发布 MarkerArray
        global_path_pub.publish(global_path_marker);
        local_path_pub.publish(local_path_marker);
        marker_pub.publish(marker_array);
        ego_vehicle_pub.publish(ego_vehicle);

        rate.sleep();

        
    }

    return 0;
}
